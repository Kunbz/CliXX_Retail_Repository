pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
        // RUNNER = 'KUNBI'
        RUNNER = "${RUNNER}"
    }

    stages {
        stage ('Sonarcube Scan') {
        steps {
         script {
          scannerHome = tool 'sonarqube'
        }
        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'KUNBI_TOKEN')]){
        withSonarQubeEnv('SonarQubeScanner') {
           slackSend (color: '#FFFF00', message: "STARTING DOCKER IMAGE BUILD- ${env.RUNNER}: JOB  '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
          sh " ${scannerHome}/bin/sonar-scanner \
          -Dsonar.projectKey=Clixx-App-KUNBI   \
          -Dsonar.login=${KUNBI_TOKEN} "
        }
        }
        }

}

 stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
            }
            }
        }

          stage ('Build Docker Image') {
          steps {
            // script{
            //  dockerHome= tool 'docker-inst'
            // }
            //  sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
            sh "docker build . -t clixx-image:$VERSION "
          }
        }

  stage ('Starting Docker Image') {
          steps {
              slackSend (color: '#FFFF00', message: "STARTING DOCKER APPLICATION ${env.RUNNER}: JOB  '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
              sh '''
              if ( docker ps|grep clixx-cont ) then
                 echo "Docker image exists, killing it"
                 docker stop clixx-cont
                 docker rm clixx-cont
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION
              else
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION 
              fi
              '''
          }
        }

  stage ('Restore CliXX Database') {
          steps {
              sh '''
            python3 -m venv python3-virtualenv
            source python3-virtualenv/bin/activate
            python3 --version
            pip3 install boto3 botocore boto
            ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
            deactivate

              '''
          }
        }

  stage ('Configure DB Instance') {
          steps {
            script {
                def userInput = input(id: 'confirm', message: 'Is DB creation complete?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Complete?', name: 'confirm'] ])
             }
              sh '''
               USERNAME='wordpressuser'
               PASSWORD='W3lcome123'
               DBNAME='wordpressdb'
               SERVER_IP=`curl http://169.254.169.254/latest/meta-data/public-ipv4`
               SERVER_INSTANCE='wordpressdbclixxjenkins.ckedvwdjlcc9.us-east-1.rds.amazonaws.com'

               mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME <<-_EOF_ 
               UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';
               _EOF_

              '''
          }
        }
  stage ('Deployment Tear Down Prompt ') {
              steps {
                script {
                def userInput = input(id: 'confirm', message: 'Please Test CliXX Image Deployment. Should I delete now?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down App', name: 'confirm'] ])
             }
             sh " docker stop clixx-cont"
             sh " docker rm  clixx-cont"
           }
        }

    }
}

def getSonarPath(){
        def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }
def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }
    
    